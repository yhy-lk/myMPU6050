# MyMPU6050 Library

## Overview
This library is designed for interfacing with the MPU6050 sensor using the STM32F407 microcontroller. It provides functionalities for initializing the sensor, retrieving and filtering data, and updating orientation parameters.

## Installation
1. Download the library.
2. Add the library to your Arduino libraries folder.
3. Include the library in your project using `#include <myMPU6050.h>`.

## Attention
1. Some open source dependent libraries need to be installed. The following is an example .ini file
    [env:genericSTM32F407VET6]
    platform = ststm32
    board = genericSTM32F407VET6
    framework = arduino
    lib_deps = 
        adafruit/Adafruit MPU6050@^2.2.6
        electroniccats/MPU6050@^1.3.1
        adafruit/Adafruit BusIO@^1.16.1
        arduino-libraries/Madgwick@^1.2.0
    monitor_speed = 115200
2. Please pay attention to the IMU update frequency you set. In the sample code, it is 100hz.

## Functions

### `bool mpuInit(TwoWire IIC_6050)`
Initializes the MPU6050 sensor with the specified IIC_6050 address.

### `void getDataErrorSum()`
Calculates the sum of data errors for the sensor.

### `void getDataError()`
Calculates individual data errors for the sensor.

### `void IMUupdate()`
Updates the sensor's IMU data.

### `void updataMyYaw()`
Updates the sensor's yaw data.

### `float getRoll()`
Returns the current roll angle.

### `float getPitch()`
Returns the current pitch angle.

### `float getYaw()`
Returns the current yaw angle.

### `float GetMyYaw()`
Returns the custom yaw angle.

## Example Usage
```cpp
#include <Arduino.h>
#include <myMPU6050.h>
#include <HardwareSerial.h>

globalMPU6050Params MPU6050Params = {10, 0, 0, 0};
MyMPU6050 My6050;

// 使用STM32F407的USART1硬件接口
HardwareSerial Serial1 = HardwareSerial(USART1);
// NPU6050的IIC地址
TwoWire IIC_6050 = TwoWire(PB7, PB6);


void setup() {

    Serial1.begin(115200);

    // MPU6050初始化
    while(!My6050.mpuInit(&IIC_6050)) {
        Serial1.println("MPU6050 NOT_FOUND!");
        delay(3000);
    }
    Serial1.println("MPU6050 found!");
    
    // 设置MPU6050数据更新频率
    My6050.begin(1000.0f / (float)MPU6050Params.MPU6050dt);

    // MPU6050数据滤波优化
    My6050.getDataErrorSum();
    My6050.getDataError();
    Serial1.println("MPU6050 datafilter succeed!");

}

void loop() {
    if(millis() - MPU6050Params.preMPU6050Millis >= MPU6050Params.MPU6050dt) {
        MPU6050Params.preMPU6050Millis = millis();
        My6050.IMUupdate();
        My6050.updataMyYaw();
    }

    if(millis() - MPU6050Params.previousprintMillis >= 1000) {
        MPU6050Params.previousprintMillis = millis();
        Serial1.print("Roll: ");
        Serial1.print(My6050.getRoll());
        Serial1.print(", Pitch: ");
        Serial1.print(My6050.getPitch());
        Serial1.print(", Yaw: ");
        Serial1.println(My6050.getYaw());
        Serial1.print(", myYaw: ");
        Serial1.println(My6050.GetMyYaw());
    }
}